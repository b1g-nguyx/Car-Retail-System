@model X.PagedList.IPagedList<CarViewModel>
@using X.PagedList.Mvc.Core
@{
    ViewData["Title"] = "Index";
}

<h1>Car List</h1>

<!-- Search and Create in one row -->
<div class="row mb-3">
    <div class="col-md-8">
        <form asp-action="Index" method="get" class="d-flex">
            <input type="text" name="searchString" class="form-control me-2" placeholder="Search..."
                value="@ViewData["CurrentFilter"]" />
            <button type="submit" class="btn btn-primary">Search</button>
            <a asp-action="Index" class="btn btn-secondary ms-2">Reset</a>
        </form>
    </div>
    <div class="col-md-4 text-end">
        <a asp-action="Create" class="btn btn-success">Create New</a>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Brand Name</th>
            <th>Category Name</th>
            <th>Model</th>
            <th>Year</th>
            <th>Price Per Day</th>
            <th>Availability</th>
            <th>Description</th>
            <th>License Plates</th>
            <th>Kilometers</th>
            <th>Fuel Type</th>
            <th>Transmission</th>
            <th>Seats</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @if (item.Images != null && item.Images.Any())
                    {
                        <img src="@item.Images.First().ImageUrl" alt="Car Image"
                            style="width: 100px; height: auto; border-radius: 5px;">
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>@Html.DisplayFor(modelItem => item.Brand.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Category.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Model)</td>
                <td>@Html.DisplayFor(modelItem => item.Year)</td>
                <td>@Html.DisplayFor(modelItem => item.PricePerDay)</td>
                <td>@Html.DisplayFor(modelItem => item.Availability)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.LicensePlates)</td>
                <td>@Html.DisplayFor(modelItem => item.Kilometers)</td>
                <td>@Html.DisplayFor(modelItem => item.FuelType)</td>
                <td>@Html.DisplayFor(modelItem => item.Transmission)</td>
                <td>@Html.DisplayFor(modelItem => item.Seats)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary btn-sm" data-bs-toggle="tooltip"
                        title="Edit">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm" data-bs-toggle="tooltip"
                        title="Details">
                        <i class="bi bi-eye"></i>
                    </a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm" data-bs-toggle="tooltip"
                        title="Delete">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>


            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
@Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchString = ViewData["CurrentFilter"] }),
new PagedListRenderOptions
{
    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
    DisplayLinkToLastPage = PagedListDisplayMode.Always,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always,
    UlElementClasses = new[] { "pagination" },
    LiElementClasses = new[] { "page-item" },
    PageClasses = new[] { "page-link" }
})
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>
