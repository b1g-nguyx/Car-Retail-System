@* @model PaginationBase

@{
    var urlTemplate = Url.Action() + "?page={0}";
    var request = ViewContext.HttpContext.Request;

    foreach (var key in request.Query.Keys)
    {
        if (key == "page")
        {
            continue;
        }
        if (request.Query[key].Count > 1)
        {
            foreach (var item in (string[])request.Query[key]!)
            {
                urlTemplate += "&" + key + "=" + item;
            }
        }
        else
        {
            urlTemplate += "&" + key + "=" + request.Query[key];
        }
    }

    // Logic for ellipsis pagination
    var showEllipsisStart = Model.PageIndex > 4;
    var showEllipsisEnd = Model.PageIndex < Model.PageCount - 3;
    var pagesToShow = 3; // Number of pages to show before and after the current page
}

@if (Model.PageCount > 1)
{
    <nav aria-label="Page navigation">
    <ul class="pagination">
        <!-- "Start" Button -->
        @if (Model.PageIndex > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", "1")" aria-label="Start">
                        <span aria-hidden="true">Start</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                        <span aria-hidden="true">Start</span>
                    </a>
                </li>
            }

            <!-- "Previous" Button -->
            @if (Model.PageIndex > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", (Model.PageIndex - 1).ToString())"
                        aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }

            <!-- First Pages -->
            @for (var i = 1; i <= pagesToShow && i <= Model.PageCount; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@urlTemplate.Replace("{0}", i.ToString())">@i</a>
                    </li>
                }
            }

            <!-- Ellipsis after first few pages -->
            @if (showEllipsisStart)
            {
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            }

            <!-- Pages near current page -->
            @for (var i = Math.Max(Model.PageIndex - 1, pagesToShow + 1); i <= Math.Min(Model.PageIndex + 1,
           Model.PageCount); i++)
            {
                if (i > pagesToShow && i < Model.PageCount - pagesToShow + 1)
                {
                    if (i == Model.PageIndex)
                    {
                        <li class="page-item active" aria-current="page">
                            <span class="page-link">@i</span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" href="@urlTemplate.Replace("{0}", i.ToString())">@i</a>
                        </li>
                    }
                }
            }

            <!-- Ellipsis before last few pages -->
            @if (showEllipsisEnd)
            {
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            }

            <!-- Last Pages -->
            @for (var i = Math.Max(Model.PageCount - pagesToShow + 1, pagesToShow + 1); i <= Model.PageCount; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@urlTemplate.Replace("{0}", i.ToString())">@i</a>
                    </li>
                }
            }

            <!-- "Next" Button -->
            @if (Model.PageIndex < Model.PageCount)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", (Model.PageIndex + 1).ToString())" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }

            <!-- "End" Button -->
            @if (Model.PageIndex < Model.PageCount)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", Model.PageCount.ToString())" aria-label="End">
                        <span aria-hidden="true">End</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                        <span aria-hidden="true">End</span>
                    </a>
                </li>
            }
        </ul>
    </nav>
} *@
